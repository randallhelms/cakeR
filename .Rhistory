date_filter <- function(x,date) {
y <- x %>%
filter(full_date == date)
return(y)
}
date_filter(test,'Wed Sep 15')
test %>%
date_filter(date='Wed Sep 15')
test %>%
date_filter('Wed Sep 15')
boards_dim
cake_boards <- function(cake,cake_type,color,how_thick=3) {
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
if (cake_type == 'round' {
cake_dims <- cake[[4]]$d
} else {
cake_dims <- cake[[4]]$l
}
cake_dims_cm <- cake_dims * 2.54
boards_dim <- boards %>%
filter(size_inches == cake_dims & board_color == color & thickness == how_thick)
#check for stock
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == cake_dims & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == cake_dims)
if (boards_dim$stock == 0) {
new_size <- cake_dims + 1
boards_dim <- boards %>%
filter(size_inches == new_size & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == new_size & thickness == how_thick)
}
}
}
}
return(boards_dim)
}
cake_boards <- function(cake,cake_type,color,how_thick=3) {
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
if (cake_type == 'round') {
cake_dims <- cake[[4]]$d
} else {
cake_dims <- cake[[4]]$l
}
cake_dims_cm <- cake_dims * 2.54
boards_dim <- boards %>%
filter(size_inches == cake_dims & board_color == color & thickness == how_thick)
#check for stock
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == cake_dims & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == cake_dims)
if (boards_dim$stock == 0) {
new_size <- cake_dims + 1
boards_dim <- boards %>%
filter(size_inches == new_size & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == new_size & thickness == how_thick)
}
}
}
}
return(boards_dim)
}
c1
cboard <- cake_boards(c1,'round','white')
cboard
cboard
boxes <- gs_quickread('Sweet Time Berlin Tracking','boxes') %>%
tidycols()
boxes
boxes <- gs_quickread('Sweet Time Berlin Tracking','boxes') %>%
tidycols()
boxes
boxes <- gs_quickread('Sweet Time Berlin Tracking','boxes') %>%
tidycols()
boxes
cboard
library(cakeR)
cboard <- cake_boards(c1,'round','white')
cboard
c1
remove(cake_boards)
cboard <- cake_boards(c1,'round','white')
cboard
cake_type <- 'round'
color <- 'white'
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
cake_dims_cm <- cake_dims * 2.54
board_dims <- cake_dims + 3
boards_dim <- boards %>%
filter(size_inches == board_dims & board_color == color & thickness == how_thick)
cake_type <- 'round'
color <- 'white'
how_thick =3
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
cake_dims_cm <- cake_dims * 2.54
board_dims <- cake_dims + 3
boards_dim <- boards %>%
filter(size_inches == board_dims & board_color == color & thickness == how_thick)
boards_dim
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == board_dims & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == board_dims)
if (boards_dim$stock == 0) {
new_size <- board_dims + 1
boards_dim <- boards %>%
filter(size_inches == new_size & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == new_size & thickness == how_thick)
}
}
}
}
boards_dim
cake_type <- 'round'
color <- 'white'
how_thick =3
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
cake_dims_cm <- cake_dims * 2.54
board_dims <- cake_dims + 3
boards_dim <- boards %>%
filter(size_inches == board_dims & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
nboards_dim <- boards %>%
filter(size_inches == board_dims & thickness == how_thick)
if (nboards_dim$stock == 0) {
nboards_dim <- boards %>%
filter(size_inches == board_dims)
if (nboards_dim$stock == 0) {
new_size <- board_dims + 1
nboards_dim <- boards %>%
filter(size_inches == new_size & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
nboards_dim <- boards %>%
filter(size_inches == new_size & thickness == how_thick)
}
}
}
}
boards_dim
nboards_dim
cake_type <- 'round'
color <- 'white'
how_thick =3
boards <- gs_quickread('Sweet Time Berlin Tracking','sundries stock') %>%
tidycols() %>%
filter(board_type == cake_type)
cake_dims_cm <- cake_dims * 2.54
board_dims <- cake_dims + 3
boards_dim <- boards %>%
filter(size_inches == board_dims & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
boards_dim <- boards %>%
filter(size_inches == board_dims & thickness == how_thick) %>%
filter(stock > 0)
if (nrow(boards_dim) == 0) {
boards_dim <- boards %>%
filter(size_inches == board_dims) %>%
filter(stock > 0)
if (nrow(boards_dim) == 0) {
new_size <- board_dims + 1
boards_dim <- boards %>%
filter(size_inches == new_size & board_color == color & thickness == how_thick)
if (boards_dim$stock == 0) {
nboards_dim <- boards %>%
filter(size_inches == new_size & thickness == how_thick) %>%
filter(stock > 0)
}
}
}
}
boards_dim
library(cakeR)
cboard <- cake_boards(c1,'round',white')
cboard <- cake_boards(c1,'round','white')
cboard
cboard <- cake_boards(c1,'round','white')
cboard
boxes
library(cakeR)
work <- labor_cost(60)
work
cboard
nbox <- cake_boxes(cboard)
nbox
cboard
work
c1[[3]]
library(cakeR)
library(cakeR)
cake_filling_round(8,3,'buttercream')
d <- 8
h <- 3
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
vol
surf_area
cake_round(8,4,'buttercream','white','vanilla')
cake_round(8,4,'ganache','white','vanilla')
eightfourgan <- cake_filling_round(8,4,'ganache')
eightfourbc <- cake_filling(8,4,'buttercream')
eightfourbc <- cake_filling_round(8,4,'buttercream')
surf_area
eightfourbc
bc <- eightfourbc[2,2]
bc
bc <- eightfourbc[1,2]
bc
bc / surf_area
mult * surf_area
mult <- 5.5
mult * surf_area
mult <- 5.5
d <- 8
h <- 4
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
eightfourbc <- cake_filling_round(8,4,'buttercream')
eightfourgan <- cake_filling_round(8,4,'ganache')
surf_area = 175.9292
bc <- eightfourbc[1,2]
mult * surf_area
library(cakeR)
eightfourbc
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
buttercream
d <- 8
h <- 4
price_list <- tibble(ingredient = c('icing_sugar','butter','double_cream','chocolate','rum'),
units = c(250,250,200,2500,700),
price = c(.49,1.75,.65,21.9,13.49),
price_per_unit = price / units )
filling <- str_to_lower(gsub(' ','_',filling))
possibles <- c('ganache','buttercream','chocolate_buttercream','coconut_rum_buttercream','vanilla_buttercream')
filling <- str_to_lower(ifelse(filling %in% c('chocolate ganache','chocolate'),'ganache',filling))
mult <- 5.5
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- ingredient_calcs(butter_calcs)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs <- butter_calcs %>%
inner_join(butter_prices,by='ingredient') %>%
mutate(unit = 'g') %>%
select(ingredient,amount,unit,price)
library(tidyverse)
price_list <- tibble(ingredient = c('icing_sugar','butter','double_cream','chocolate','rum'),
units = c(250,250,200,2500,700),
price = c(.49,1.75,.65,21.9,13.49),
price_per_unit = price / units )
filling <- str_to_lower(gsub(' ','_',filling))
possibles <- c('ganache','buttercream','chocolate_buttercream','coconut_rum_buttercream','vanilla_buttercream')
filling <- str_to_lower(ifelse(filling %in% c('chocolate ganache','chocolate'),'ganache',filling))
mult <- 5.5
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- ingredient_calcs(butter_calcs)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs <- butter_calcs %>%
inner_join(butter_prices,by='ingredient') %>%
mutate(unit = 'g') %>%
select(ingredient,amount,unit,price)
ingredient_calcs <- function(x) {
z <- x %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2) %>%
select(ingredient,price,unit)
return(z)
}
ingredient_calcs <- function(x) {
z <- x %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2)) %>%
select(ingredient,price,unit)
return(z)
}
price_list <- tibble(ingredient = c('icing_sugar','butter','double_cream','chocolate','rum'),
units = c(250,250,200,2500,700),
price = c(.49,1.75,.65,21.9,13.49),
price_per_unit = price / units )
filling <- str_to_lower(gsub(' ','_',filling))
possibles <- c('ganache','buttercream','chocolate_buttercream','coconut_rum_buttercream','vanilla_buttercream')
filling <- str_to_lower(ifelse(filling %in% c('chocolate ganache','chocolate'),'ganache',filling))
mult <- 5.5
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- ingredient_calcs(butter_calcs)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs <- butter_calcs %>%
inner_join(butter_prices,by='ingredient') %>%
mutate(unit = 'g') %>%
select(ingredient,amount,unit,price)
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- butter_calcs %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2)) %>%
select(ingredient,price,unit)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs <- butter_calcs %>%
inner_join(butter_prices,by='ingredient') %>%
mutate(unit = 'g') %>%
select(ingredient,amount,unit,price)
butter_calcs %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2))
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- butter_calcs %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2)) %>%
select(ingredient,price,units)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs <- butter_calcs %>%
inner_join(butter_prices,by='ingredient') %>%
mutate(unit = 'g') %>%
select(ingredient,amount,unit,price)
butter_calcs
butter_prices
butter_sum
butter_calcs
butter_prices
vol <- pi * (d/2)^2 * h
surf_area <- (2 * pi * (d/2) * h) + (2 * pi * (d/2)^2)
buttercream <- round(mult*surf_area,-1)
icing_sugar <- round(buttercream * (2/3),-1)
butter <- icing_sugar/2
butter_calcs <- tibble(ingredient = c('buttercream','icing_sugar','butter'),
amount = c(buttercream,icing_sugar,butter))
butter_prices <- butter_calcs %>%
inner_join(price_list,by='ingredient') %>%
mutate(price = round(price_per_unit * amount,digits=2)) %>%
select(ingredient,price,units)
butter_sum <- sum(butter_prices$price)
butter_prices <- butter_prices %>%
add_row(ingredient = 'buttercream',price=butter_sum)
butter_calcs
buttercream
buttercream <- round(mult*surf_area,-1)
buttercream
round(mult*surf_area,-1)
surf_area
?Random
growth <- tibble(week = 1:25,
animal = 1:20)
growth <- tibble(week = 1:5,
animal = 1,
weight = c(50,55,57,54,56))
growth
growth <- tibble(week = 1:5,
animal = 1,
weight = c(50,55,57,54,56))
for (i in growth$week){
eq<- function(t){
d=growth$weight
t=growth$week
(d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(eq)
}
growth <- tibble(week = 1:5,
animal = 1,
weight = c(50,55,57,54,56))
for (i in growth$week){
eq<- function(t){
d=growth$weight
t=growth$week
(d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(eq)
}
}
eq(3)
for (i in growth$week){
eq<- function(t){
d=growth$weight
t=growth$week
(d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(eq)
}
}
growth
d=growth$weight
t=growth$week
(d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
d
t
eq(3)
(d[1+1]-d[1])/(t[1+1]-t[1])*(t-t[1])+d[1]
(d[1+1]-d[1])
(t[1+1]-t[1])
(t-t[1])+d[1]
for (i in growth$week){
eq<- function(t){
d=growth$weight
t=growth$week
x <- (d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(x)
}
}
eq(3)
growth
growth <- tibble(week = 1:5,
animal = 1,
weight = c(50,52,55,54,57))
ct <- 1:nrow(growth)
eq <- function(d,t,i){
z = (d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(z)
}
eq <- function(d,t,i){
z <- (d[i+1]-d[i])/(t[i+1]-t[i])*(t-t[i])+d[i]
return(z)
}
eq(growth$weight,growth$week,3)
x<-data.frame("sub" = rep(c("sub1","sub2","sub3"),times=4),
"cond1" = rep(c("A","B"),times=c(6,6)),
"cond2" = rep(c("C","C","C","D","D","D"),times=2),
"score" = c(6,5,4, 5,4,3, 4,3,2, 3,2,1))
x
GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, draw_group = function(self, data, ..., draw_quantiles = NULL){
data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
grp <- data[1,'group']
newdata <- plyr::arrange(transform(data, x = if(grp%%2==1) xminv else xmaxv), if(grp%%2==1) y else -y)
newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x'])
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
1))
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
quantile_grob <- GeomPath$draw_panel(both, ...)
ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
}
else {
ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
}
})
geom_split_violin <- function (mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) {
layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}
dodge <- position_dodge(width=.5)
ggplot(x, aes(x=cond1, y=score, fill=cond2))+
geom_split_violin(trim = F)+
geom_point(shape=16,position=dodge)
x
ggplot(x, aes(x=cond1, y=score, fill=cond2))+
geom_split_violin(trim = F)+
geom_point(shape=16,position=dodge)+
geom_rect(aes(xmin=cond1,xmax=cond2,ymin=score,ymax=score,color='black'))
dodge <- position_dodge(width=.5)
ggplot(x, aes(x=cond1, y=score, fill=cond2))+
geom_split_violin(trim = F)+
geom_point(shape=16,position=dodge)
ggplot(x, aes(x=cond1, y=score, fill=cond2))+
geom_split_violin(trim = F)+
geom_point(shape=16,position=dodge)+
geom_rect(aes(xmin=cond1,xmax=cond1,ymin=score,ymax=score,color='black'))
